import logging
from qifparser.parser import get_class_def
from qifparser._version import __version__
from qifparser.utils import get_var_type_name, is_intrinsic_type, format_type
from qifparser.class_def import MethodDef, TypeObj
from qifparser.base_srcgen import BaseSrcGen

logger = logging.getLogger(__name__)


class CxxHdrGen(BaseSrcGen):
    def generate_impl(self, output_path):
        f = self.f
        target = self.cls
        qif_name = target.qifname
        cls = get_class_def(qif_name)
        cxx_cli_clsname = cls.cxx_name
        cxx_wp_clsname = cls.get_wp_clsname()
        print(f"generating C++ wrapper ({cxx_cli_clsname}) hdr for {qif_name}")

        self._gen_preamble()
        self._gen_class_decl()

    def _gen_preamble(self):
        cls = self.cls
        # qif_name = cls.qifname
        cpp_decl_hdrname = cls.get_cli_hdr_fname()

        self.wr("//")
        self.wr(f"// Auto-generated by qifparser {__version__}. Don't edit.\n")
        self.wr("//")
        self.wr("\n")
        # self.wr("#ifndef $hdr_defined_macro\n")
        # self.wr("#define $hdr_defined_macro\n")
        self.wr("#pragma once\n")
        self.wr("\n")

        self.wr("#include <qlib/LClassUtils.hpp>\n")
        self.wr("#include <qlib/LWrapper.hpp>\n")
        self.wr("#include <qlib/SingletonBase.hpp>\n")
        self.wr("\n")

        self.wr(f'#include "{cpp_decl_hdrname}"\n')
        self.wr("\n")

    def _gen_class_decl(self):
        cpp_cli_clsname = self.cls.cxx_name

        self.wr("//\n")
        self.wr(f"// Wrapper class for {cpp_cli_clsname}\n")
        self.wr("//\n")
